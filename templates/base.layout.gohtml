{{define "base"}}
    <!doctype html>
    <html lang="en">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <title>Bootstrap demo</title>

        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/vanillajs-datepicker@1.3.4/dist/css/datepicker-bs5.min.css">
        <link rel="stylesheet" type="text/css" href="https://unpkg.com/notie/dist/notie.min.css">
        <link rel="stylesheet" type="text/css" href="/static/css/styles.css">

    </head>
    <body>
    <nav class="navbar navbar-expand-lg bg-body-tertiary bg-primary"
         data-bs-theme="dark">
        <div class="container-fluid">
            <a class="navbar-brand" href="#">Navbar</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarSupportedContent">
                <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                    <li class="nav-item">
                        <a class="nav-link" href="/">Home</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/about">About</a>
                    </li>
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">Rooms
                        </a>
                        <ul class="dropdown-menu">
                            <li><a class="dropdown-item" href="/generals-quarters">General's Quarters</a></li>
                            <li><a class="dropdown-item" href="/majors-suite">Major's Suite</a></li>
                        </ul>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/search-availability">Book Now</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/contact">Contact</a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>
    {{block "content" .}}

    {{end}}
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/vanillajs-datepicker@1.3.4/dist/js/datepicker-full.min.js"></script>
    <script src="https://unpkg.com/notie"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    {{block "js" .}}

    {{end}}

    <script>
        let attention = Prompt();

        (() => {
            'use strict'

            // Fetch all the forms we want to apply custom Bootstrap validation styles to
            const forms = document.querySelectorAll('.needs-validation')

            // Loop over them and prevent submission
            Array.from(forms).forEach(form => {
                form.addEventListener('submit', event => {
                    if (!form.checkValidity()) {
                        event.preventDefault()
                        event.stopPropagation()
                    }

                    form.classList.add('was-validated')
                }, false)
            })
        })()

        function notify(msg, msgType) {
            notie.alert({
                type: msgType,
                text: msg,
            })
        }

        function Prompt() {
            let toast = function(c) {
                const {
                    msg = "",
                    icon = "success",
                    position = "top-end",
                } = c;

                const Toast = Swal.mixin({
                    toast: true,
                    title: msg,
                    position: position,
                    icon: icon,
                    showConfirmButton: false,
                    timer: 3000,
                    timerProgressBar: true,
                    didOpen: (toast) => {
                        toast.onmouseenter = Swal.stopTimer;
                        toast.onmouseleave = Swal.resumeTimer;
                    }
                });
                Toast.fire({});
            }

            let success = function (c) {
                const {
                    msg = "",
                    text = "",
                    footer = "",
                } = c;
                Swal.fire({
                    icon: "success",
                    title: msg,
                    text: text,
                    footer: footer,
                });
            }

            let error = function (c) {
                const {
                    msg = "",
                    text = "",
                    footer = "",
                } = c;
                Swal.fire({
                    icon: "error",
                    title: msg,
                    text: text,
                    footer: footer,
                });
            }

            async function custom(c) {
                const {
                    msg = "",
                    title = "",
                } = c;

                const {value: formValues} = await Swal.fire({
                    title: title,
                    html: msg,
                    backdrop: false,
                    focusConfirm: false,
                    showCancelButton: true,
                    willOpen: () => {
                        const elem = document.getElementById('reservation-dates-modal');
                        const rp = new DateRangePicker(elem, {
                            format: 'yyyy-mm-dd',
                            showOnFocus: true,
                        })
                    },

                    preConfirm: () => {
                        return [
                            document.getElementById('start').value,
                            document.getElementById('end').value
                        ];
                    },

                    didOpen: () => {
                        document.getElementById('start').removeAttribute('disabled');
                        document.getElementById('end').removeAttribute('disabled');
                    },
                });
                if (formValues) {
                    Swal.fire(JSON.stringify(formValues));
                }
            }

            return {
                toast: toast,
                success: success,
                error: error,
                custom: custom,
            }
        }
    </script>

    </body>
    </html>
{{end}}